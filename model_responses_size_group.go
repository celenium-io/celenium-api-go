/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesSizeGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesSizeGroup{}

// ResponsesSizeGroup struct for ResponsesSizeGroup
type ResponsesSizeGroup struct {
	AvgSize *int32 `json:"avg_size,omitempty"`
	Count *int32 `json:"count,omitempty"`
	Name *string `json:"name,omitempty"`
	Size *int32 `json:"size,omitempty"`
}

// NewResponsesSizeGroup instantiates a new ResponsesSizeGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesSizeGroup() *ResponsesSizeGroup {
	this := ResponsesSizeGroup{}
	return &this
}

// NewResponsesSizeGroupWithDefaults instantiates a new ResponsesSizeGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesSizeGroupWithDefaults() *ResponsesSizeGroup {
	this := ResponsesSizeGroup{}
	return &this
}

// GetAvgSize returns the AvgSize field value if set, zero value otherwise.
func (o *ResponsesSizeGroup) GetAvgSize() int32 {
	if o == nil || IsNil(o.AvgSize) {
		var ret int32
		return ret
	}
	return *o.AvgSize
}

// GetAvgSizeOk returns a tuple with the AvgSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSizeGroup) GetAvgSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AvgSize) {
		return nil, false
	}
	return o.AvgSize, true
}

// HasAvgSize returns a boolean if a field has been set.
func (o *ResponsesSizeGroup) HasAvgSize() bool {
	if o != nil && !IsNil(o.AvgSize) {
		return true
	}

	return false
}

// SetAvgSize gets a reference to the given int32 and assigns it to the AvgSize field.
func (o *ResponsesSizeGroup) SetAvgSize(v int32) {
	o.AvgSize = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ResponsesSizeGroup) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSizeGroup) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ResponsesSizeGroup) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ResponsesSizeGroup) SetCount(v int32) {
	o.Count = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponsesSizeGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSizeGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponsesSizeGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponsesSizeGroup) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ResponsesSizeGroup) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSizeGroup) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ResponsesSizeGroup) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ResponsesSizeGroup) SetSize(v int32) {
	o.Size = &v
}

func (o ResponsesSizeGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesSizeGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvgSize) {
		toSerialize["avg_size"] = o.AvgSize
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableResponsesSizeGroup struct {
	value *ResponsesSizeGroup
	isSet bool
}

func (v NullableResponsesSizeGroup) Get() *ResponsesSizeGroup {
	return v.value
}

func (v *NullableResponsesSizeGroup) Set(val *ResponsesSizeGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesSizeGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesSizeGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesSizeGroup(val *ResponsesSizeGroup) *NullableResponsesSizeGroup {
	return &NullableResponsesSizeGroup{value: val, isSet: true}
}

func (v NullableResponsesSizeGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesSizeGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"time"
	"os"
)

// checks if the ResponsesSignalVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesSignalVersion{}

// ResponsesSignalVersion struct for ResponsesSignalVersion
type ResponsesSignalVersion struct {
	Height *int64 `json:"height,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	TxHash **os.File `json:"tx_hash,omitempty"`
	Validator *ResponsesShortValidator `json:"validator,omitempty"`
	Version *int64 `json:"version,omitempty"`
	VotingPower *string `json:"voting_power,omitempty"`
}

// NewResponsesSignalVersion instantiates a new ResponsesSignalVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesSignalVersion() *ResponsesSignalVersion {
	this := ResponsesSignalVersion{}
	return &this
}

// NewResponsesSignalVersionWithDefaults instantiates a new ResponsesSignalVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesSignalVersionWithDefaults() *ResponsesSignalVersion {
	this := ResponsesSignalVersion{}
	return &this
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetHeight() int64 {
	if o == nil || IsNil(o.Height) {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *ResponsesSignalVersion) SetHeight(v int64) {
	o.Height = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ResponsesSignalVersion) SetId(v int64) {
	o.Id = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ResponsesSignalVersion) SetTime(v time.Time) {
	o.Time = &v
}

// GetTxHash returns the TxHash field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetTxHash() *os.File {
	if o == nil || IsNil(o.TxHash) {
		var ret *os.File
		return ret
	}
	return *o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetTxHashOk() (**os.File, bool) {
	if o == nil || IsNil(o.TxHash) {
		return nil, false
	}
	return o.TxHash, true
}

// HasTxHash returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasTxHash() bool {
	if o != nil && !IsNil(o.TxHash) {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given *os.File and assigns it to the TxHash field.
func (o *ResponsesSignalVersion) SetTxHash(v *os.File) {
	o.TxHash = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetValidator() ResponsesShortValidator {
	if o == nil || IsNil(o.Validator) {
		var ret ResponsesShortValidator
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetValidatorOk() (*ResponsesShortValidator, bool) {
	if o == nil || IsNil(o.Validator) {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given ResponsesShortValidator and assigns it to the Validator field.
func (o *ResponsesSignalVersion) SetValidator(v ResponsesShortValidator) {
	o.Validator = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *ResponsesSignalVersion) SetVersion(v int64) {
	o.Version = &v
}

// GetVotingPower returns the VotingPower field value if set, zero value otherwise.
func (o *ResponsesSignalVersion) GetVotingPower() string {
	if o == nil || IsNil(o.VotingPower) {
		var ret string
		return ret
	}
	return *o.VotingPower
}

// GetVotingPowerOk returns a tuple with the VotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesSignalVersion) GetVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.VotingPower) {
		return nil, false
	}
	return o.VotingPower, true
}

// HasVotingPower returns a boolean if a field has been set.
func (o *ResponsesSignalVersion) HasVotingPower() bool {
	if o != nil && !IsNil(o.VotingPower) {
		return true
	}

	return false
}

// SetVotingPower gets a reference to the given string and assigns it to the VotingPower field.
func (o *ResponsesSignalVersion) SetVotingPower(v string) {
	o.VotingPower = &v
}

func (o ResponsesSignalVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesSignalVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.TxHash) {
		toSerialize["tx_hash"] = o.TxHash
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VotingPower) {
		toSerialize["voting_power"] = o.VotingPower
	}
	return toSerialize, nil
}

type NullableResponsesSignalVersion struct {
	value *ResponsesSignalVersion
	isSet bool
}

func (v NullableResponsesSignalVersion) Get() *ResponsesSignalVersion {
	return v.value
}

func (v *NullableResponsesSignalVersion) Set(val *ResponsesSignalVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesSignalVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesSignalVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesSignalVersion(val *ResponsesSignalVersion) *NullableResponsesSignalVersion {
	return &NullableResponsesSignalVersion{value: val, isSet: true}
}

func (v NullableResponsesSignalVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesSignalVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



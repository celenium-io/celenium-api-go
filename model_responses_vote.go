/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"time"
)

// checks if the ResponsesVote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesVote{}

// ResponsesVote struct for ResponsesVote
type ResponsesVote struct {
	DepositTime *time.Time `json:"deposit_time,omitempty"`
	Height *int64 `json:"height,omitempty"`
	Id *int64 `json:"id,omitempty"`
	ProposalId *int64 `json:"proposal_id,omitempty"`
	Status *string `json:"status,omitempty"`
	Validator *ResponsesShortValidator `json:"validator,omitempty"`
	Voter *ResponsesShortAddress `json:"voter,omitempty"`
	VoterId *int64 `json:"voter_id,omitempty"`
	Weight *int64 `json:"weight,omitempty"`
}

// NewResponsesVote instantiates a new ResponsesVote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesVote() *ResponsesVote {
	this := ResponsesVote{}
	return &this
}

// NewResponsesVoteWithDefaults instantiates a new ResponsesVote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesVoteWithDefaults() *ResponsesVote {
	this := ResponsesVote{}
	return &this
}

// GetDepositTime returns the DepositTime field value if set, zero value otherwise.
func (o *ResponsesVote) GetDepositTime() time.Time {
	if o == nil || IsNil(o.DepositTime) {
		var ret time.Time
		return ret
	}
	return *o.DepositTime
}

// GetDepositTimeOk returns a tuple with the DepositTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetDepositTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DepositTime) {
		return nil, false
	}
	return o.DepositTime, true
}

// HasDepositTime returns a boolean if a field has been set.
func (o *ResponsesVote) HasDepositTime() bool {
	if o != nil && !IsNil(o.DepositTime) {
		return true
	}

	return false
}

// SetDepositTime gets a reference to the given time.Time and assigns it to the DepositTime field.
func (o *ResponsesVote) SetDepositTime(v time.Time) {
	o.DepositTime = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ResponsesVote) GetHeight() int64 {
	if o == nil || IsNil(o.Height) {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ResponsesVote) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *ResponsesVote) SetHeight(v int64) {
	o.Height = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsesVote) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsesVote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ResponsesVote) SetId(v int64) {
	o.Id = &v
}

// GetProposalId returns the ProposalId field value if set, zero value otherwise.
func (o *ResponsesVote) GetProposalId() int64 {
	if o == nil || IsNil(o.ProposalId) {
		var ret int64
		return ret
	}
	return *o.ProposalId
}

// GetProposalIdOk returns a tuple with the ProposalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetProposalIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProposalId) {
		return nil, false
	}
	return o.ProposalId, true
}

// HasProposalId returns a boolean if a field has been set.
func (o *ResponsesVote) HasProposalId() bool {
	if o != nil && !IsNil(o.ProposalId) {
		return true
	}

	return false
}

// SetProposalId gets a reference to the given int64 and assigns it to the ProposalId field.
func (o *ResponsesVote) SetProposalId(v int64) {
	o.ProposalId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResponsesVote) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResponsesVote) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResponsesVote) SetStatus(v string) {
	o.Status = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *ResponsesVote) GetValidator() ResponsesShortValidator {
	if o == nil || IsNil(o.Validator) {
		var ret ResponsesShortValidator
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetValidatorOk() (*ResponsesShortValidator, bool) {
	if o == nil || IsNil(o.Validator) {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *ResponsesVote) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given ResponsesShortValidator and assigns it to the Validator field.
func (o *ResponsesVote) SetValidator(v ResponsesShortValidator) {
	o.Validator = &v
}

// GetVoter returns the Voter field value if set, zero value otherwise.
func (o *ResponsesVote) GetVoter() ResponsesShortAddress {
	if o == nil || IsNil(o.Voter) {
		var ret ResponsesShortAddress
		return ret
	}
	return *o.Voter
}

// GetVoterOk returns a tuple with the Voter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetVoterOk() (*ResponsesShortAddress, bool) {
	if o == nil || IsNil(o.Voter) {
		return nil, false
	}
	return o.Voter, true
}

// HasVoter returns a boolean if a field has been set.
func (o *ResponsesVote) HasVoter() bool {
	if o != nil && !IsNil(o.Voter) {
		return true
	}

	return false
}

// SetVoter gets a reference to the given ResponsesShortAddress and assigns it to the Voter field.
func (o *ResponsesVote) SetVoter(v ResponsesShortAddress) {
	o.Voter = &v
}

// GetVoterId returns the VoterId field value if set, zero value otherwise.
func (o *ResponsesVote) GetVoterId() int64 {
	if o == nil || IsNil(o.VoterId) {
		var ret int64
		return ret
	}
	return *o.VoterId
}

// GetVoterIdOk returns a tuple with the VoterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetVoterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VoterId) {
		return nil, false
	}
	return o.VoterId, true
}

// HasVoterId returns a boolean if a field has been set.
func (o *ResponsesVote) HasVoterId() bool {
	if o != nil && !IsNil(o.VoterId) {
		return true
	}

	return false
}

// SetVoterId gets a reference to the given int64 and assigns it to the VoterId field.
func (o *ResponsesVote) SetVoterId(v int64) {
	o.VoterId = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ResponsesVote) GetWeight() int64 {
	if o == nil || IsNil(o.Weight) {
		var ret int64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesVote) GetWeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ResponsesVote) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int64 and assigns it to the Weight field.
func (o *ResponsesVote) SetWeight(v int64) {
	o.Weight = &v
}

func (o ResponsesVote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesVote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepositTime) {
		toSerialize["deposit_time"] = o.DepositTime
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProposalId) {
		toSerialize["proposal_id"] = o.ProposalId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	if !IsNil(o.Voter) {
		toSerialize["voter"] = o.Voter
	}
	if !IsNil(o.VoterId) {
		toSerialize["voter_id"] = o.VoterId
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

type NullableResponsesVote struct {
	value *ResponsesVote
	isSet bool
}

func (v NullableResponsesVote) Get() *ResponsesVote {
	return v.value
}

func (v *NullableResponsesVote) Set(val *ResponsesVote) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesVote) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesVote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesVote(val *ResponsesVote) *NullableResponsesVote {
	return &NullableResponsesVote{value: val, isSet: true}
}

func (v NullableResponsesVote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesVote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



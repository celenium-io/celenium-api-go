/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"time"
	"os"
)

// checks if the ResponsesUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesUpgrade{}

// ResponsesUpgrade struct for ResponsesUpgrade
type ResponsesUpgrade struct {
	Height *int64 `json:"height,omitempty"`
	Id *int64 `json:"id,omitempty"`
	MsgId *int64 `json:"msg_id,omitempty"`
	Signer *ResponsesShortAddress `json:"signer,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	TxHash **os.File `json:"tx_hash,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewResponsesUpgrade instantiates a new ResponsesUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesUpgrade() *ResponsesUpgrade {
	this := ResponsesUpgrade{}
	return &this
}

// NewResponsesUpgradeWithDefaults instantiates a new ResponsesUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesUpgradeWithDefaults() *ResponsesUpgrade {
	this := ResponsesUpgrade{}
	return &this
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetHeight() int64 {
	if o == nil || IsNil(o.Height) {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *ResponsesUpgrade) SetHeight(v int64) {
	o.Height = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ResponsesUpgrade) SetId(v int64) {
	o.Id = &v
}

// GetMsgId returns the MsgId field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetMsgId() int64 {
	if o == nil || IsNil(o.MsgId) {
		var ret int64
		return ret
	}
	return *o.MsgId
}

// GetMsgIdOk returns a tuple with the MsgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetMsgIdOk() (*int64, bool) {
	if o == nil || IsNil(o.MsgId) {
		return nil, false
	}
	return o.MsgId, true
}

// HasMsgId returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasMsgId() bool {
	if o != nil && !IsNil(o.MsgId) {
		return true
	}

	return false
}

// SetMsgId gets a reference to the given int64 and assigns it to the MsgId field.
func (o *ResponsesUpgrade) SetMsgId(v int64) {
	o.MsgId = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetSigner() ResponsesShortAddress {
	if o == nil || IsNil(o.Signer) {
		var ret ResponsesShortAddress
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetSignerOk() (*ResponsesShortAddress, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given ResponsesShortAddress and assigns it to the Signer field.
func (o *ResponsesUpgrade) SetSigner(v ResponsesShortAddress) {
	o.Signer = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ResponsesUpgrade) SetTime(v time.Time) {
	o.Time = &v
}

// GetTxHash returns the TxHash field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetTxHash() *os.File {
	if o == nil || IsNil(o.TxHash) {
		var ret *os.File
		return ret
	}
	return *o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetTxHashOk() (**os.File, bool) {
	if o == nil || IsNil(o.TxHash) {
		return nil, false
	}
	return o.TxHash, true
}

// HasTxHash returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasTxHash() bool {
	if o != nil && !IsNil(o.TxHash) {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given *os.File and assigns it to the TxHash field.
func (o *ResponsesUpgrade) SetTxHash(v *os.File) {
	o.TxHash = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ResponsesUpgrade) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesUpgrade) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ResponsesUpgrade) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *ResponsesUpgrade) SetVersion(v int64) {
	o.Version = &v
}

func (o ResponsesUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MsgId) {
		toSerialize["msg_id"] = o.MsgId
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.TxHash) {
		toSerialize["tx_hash"] = o.TxHash
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableResponsesUpgrade struct {
	value *ResponsesUpgrade
	isSet bool
}

func (v NullableResponsesUpgrade) Get() *ResponsesUpgrade {
	return v.value
}

func (v *NullableResponsesUpgrade) Set(val *ResponsesUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesUpgrade(val *ResponsesUpgrade) *NullableResponsesUpgrade {
	return &NullableResponsesUpgrade{value: val, isSet: true}
}

func (v NullableResponsesUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



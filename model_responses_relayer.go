/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesRelayer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesRelayer{}

// ResponsesRelayer struct for ResponsesRelayer
type ResponsesRelayer struct {
	Addresses []string `json:"addresses,omitempty"`
	Contact *ResponsesContact `json:"contact,omitempty"`
	Logo *string `json:"logo,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewResponsesRelayer instantiates a new ResponsesRelayer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesRelayer() *ResponsesRelayer {
	this := ResponsesRelayer{}
	return &this
}

// NewResponsesRelayerWithDefaults instantiates a new ResponsesRelayer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesRelayerWithDefaults() *ResponsesRelayer {
	this := ResponsesRelayer{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ResponsesRelayer) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesRelayer) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ResponsesRelayer) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *ResponsesRelayer) SetAddresses(v []string) {
	o.Addresses = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ResponsesRelayer) GetContact() ResponsesContact {
	if o == nil || IsNil(o.Contact) {
		var ret ResponsesContact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesRelayer) GetContactOk() (*ResponsesContact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ResponsesRelayer) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ResponsesContact and assigns it to the Contact field.
func (o *ResponsesRelayer) SetContact(v ResponsesContact) {
	o.Contact = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ResponsesRelayer) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesRelayer) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ResponsesRelayer) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *ResponsesRelayer) SetLogo(v string) {
	o.Logo = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponsesRelayer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesRelayer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponsesRelayer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponsesRelayer) SetName(v string) {
	o.Name = &v
}

func (o ResponsesRelayer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesRelayer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableResponsesRelayer struct {
	value *ResponsesRelayer
	isSet bool
}

func (v NullableResponsesRelayer) Get() *ResponsesRelayer {
	return v.value
}

func (v *NullableResponsesRelayer) Set(val *ResponsesRelayer) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesRelayer) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesRelayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesRelayer(val *ResponsesRelayer) *NullableResponsesRelayer {
	return &NullableResponsesRelayer{value: val, isSet: true}
}

func (v NullableResponsesRelayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesRelayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



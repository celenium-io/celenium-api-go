/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"fmt"
)

// TypesEventType the model 'TypesEventType'
type TypesEventType string

// List of types.EventType
const (
	EventTypeUnknown TypesEventType = "unknown"
	EventTypeCoinReceived TypesEventType = "coin_received"
	EventTypeCoinbase TypesEventType = "coinbase"
	EventTypeCoinSpent TypesEventType = "coin_spent"
	EventTypeBurn TypesEventType = "burn"
	EventTypeMint TypesEventType = "mint"
	EventTypeMessage TypesEventType = "message"
	EventTypeProposerReward TypesEventType = "proposer_reward"
	EventTypeRewards TypesEventType = "rewards"
	EventTypeCommission TypesEventType = "commission"
	EventTypeLiveness TypesEventType = "liveness"
	EventTypeTransfer TypesEventType = "transfer"
	EventTypeCelestiablobv1EventPayForBlobs TypesEventType = "celestia.blob.v1.EventPayForBlobs"
	EventTypeRedelegate TypesEventType = "redelegate"
	EventTypeAttestationRequest TypesEventType = "AttestationRequest"
	EventTypeWithdrawRewards TypesEventType = "withdraw_rewards"
	EventTypeWithdrawCommission TypesEventType = "withdraw_commission"
	EventTypeSetWithdrawAddress TypesEventType = "set_withdraw_address"
	EventTypeCreateValidator TypesEventType = "create_validator"
	EventTypeDelegate TypesEventType = "delegate"
	EventTypeEditValidator TypesEventType = "edit_validator"
	EventTypeUnbond TypesEventType = "unbond"
	EventTypeTx TypesEventType = "tx"
	EventTypeCompleteRedelegation TypesEventType = "complete_redelegation"
	EventTypeCompleteUnbonding TypesEventType = "complete_unbonding"
	EventTypeUseFeegrant TypesEventType = "use_feegrant"
	EventTypeRevokeFeegrant TypesEventType = "revoke_feegrant"
	EventTypeSetFeegrant TypesEventType = "set_feegrant"
	EventTypeUpdateFeegrant TypesEventType = "update_feegrant"
	EventTypeSlash TypesEventType = "slash"
	EventTypeProposalVote TypesEventType = "proposal_vote"
	EventTypeProposalDeposit TypesEventType = "proposal_deposit"
	EventTypeSubmitProposal TypesEventType = "submit_proposal"
	EventTypeCosmosauthzv1beta1EventGrant TypesEventType = "cosmos.authz.v1beta1.EventGrant"
	EventTypeSendPacket TypesEventType = "send_packet"
	EventTypeIbcTransfer TypesEventType = "ibc_transfer"
	EventTypeFungibleTokenPacket TypesEventType = "fungible_token_packet"
	EventTypeAcknowledgePacket TypesEventType = "acknowledge_packet"
	EventTypeCreateClient TypesEventType = "create_client"
	EventTypeUpdateClient TypesEventType = "update_client"
	EventTypeConnectionOpenTry TypesEventType = "connection_open_try"
	EventTypeConnectionOpenInit TypesEventType = "connection_open_init"
	EventTypeConnectionOpenConfirm TypesEventType = "connection_open_confirm"
	EventTypeConnectionOpenAck TypesEventType = "connection_open_ack"
	EventTypeChannelOpenTry TypesEventType = "channel_open_try"
	EventTypeChannelOpenInit TypesEventType = "channel_open_init"
	EventTypeChannelOpenConfirm TypesEventType = "channel_open_confirm"
	EventTypeChannelOpenAck TypesEventType = "channel_open_ack"
	EventTypeRecvPacket TypesEventType = "recv_packet"
	EventTypeWriteAcknowledgement TypesEventType = "write_acknowledgement"
	EventTypeTimeout TypesEventType = "timeout"
	EventTypeTimeoutPacket TypesEventType = "timeout_packet"
	EventTypeCosmosauthzv1beta1EventRevoke TypesEventType = "cosmos.authz.v1beta1.EventRevoke"
	EventTypeCosmosauthzv1EventRevoke TypesEventType = "cosmos.authz.v1.EventRevoke"
	EventTypeCancelUnbondingDelegation TypesEventType = "cancel_unbonding_delegation"
	EventTypeActiveProposal TypesEventType = "active_proposal"
	EventTypeInactiveProposal TypesEventType = "inactive_proposal"
	EventTypeIcs27Packet TypesEventType = "ics27_packet"
	EventTypeChannelCloseConfirm TypesEventType = "channel_close_confirm"
	EventTypeUpdateClientProposal TypesEventType = "update_client_proposal"
	EventTypeHyperlanecorev1EventDispatch TypesEventType = "hyperlane.core.v1.EventDispatch"
	EventTypeHyperlanecorev1EventProcess TypesEventType = "hyperlane.core.v1.EventProcess"
	EventTypeHyperlanecorev1EventCreateMailbox TypesEventType = "hyperlane.core.v1.EventCreateMailbox"
	EventTypeHyperlanecorev1EventSetMailbox TypesEventType = "hyperlane.core.v1.EventSetMailbox"
	EventTypeHyperlanewarpv1EventCreateSyntheticToken TypesEventType = "hyperlane.warp.v1.EventCreateSyntheticToken"
	EventTypeHyperlanewarpv1EventCreateCollateralToken TypesEventType = "hyperlane.warp.v1.EventCreateCollateralToken"
	EventTypeHyperlanewarpv1EventSetToken TypesEventType = "hyperlane.warp.v1.EventSetToken"
	EventTypeHyperlanewarpv1EventEnrollRemoteRouter TypesEventType = "hyperlane.warp.v1.EventEnrollRemoteRouter"
	EventTypeHyperlanewarpv1EventUnrollRemoteRouter TypesEventType = "hyperlane.warp.v1.EventUnrollRemoteRouter"
	EventTypeHyperlanewarpv1EventSendRemoteTransfer TypesEventType = "hyperlane.warp.v1.EventSendRemoteTransfer"
	EventTypeHyperlanewarpv1EventReceiveRemoteTransfer TypesEventType = "hyperlane.warp.v1.EventReceiveRemoteTransfer"
	EventTypeHyperlanecorepostDispatchv1EventCreateMerkleTreeHook TypesEventType = "hyperlane.core.post_dispatch.v1.EventCreateMerkleTreeHook"
	EventTypeHyperlanecorepostDispatchv1EventInsertedIntoTree TypesEventType = "hyperlane.core.post_dispatch.v1.EventInsertedIntoTree"
	EventTypeHyperlanecorepostDispatchv1EventGasPayment TypesEventType = "hyperlane.core.post_dispatch.v1.EventGasPayment"
	EventTypeHyperlanecorepostDispatchv1EventCreateNoopHook TypesEventType = "hyperlane.core.post_dispatch.v1.EventCreateNoopHook"
	EventTypeHyperlanecorepostDispatchv1EventCreateIgp TypesEventType = "hyperlane.core.post_dispatch.v1.EventCreateIgp"
	EventTypeHyperlanecorepostDispatchv1EventSetIgp TypesEventType = "hyperlane.core.post_dispatch.v1.EventSetIgp"
	EventTypeHyperlanecorepostDispatchv1EventSetDestinationGasConfig TypesEventType = "hyperlane.core.post_dispatch.v1.EventSetDestinationGasConfig"
	EventTypeHyperlanecorepostDispatchv1EventClaimIgp TypesEventType = "hyperlane.core.post_dispatch.v1.EventClaimIgp"
	EventTypeHyperlanecoreinterchainSecurityv1EventCreateNoopIsm TypesEventType = "hyperlane.core.interchain_security.v1.EventCreateNoopIsm"
	EventTypeHyperlanecoreinterchainSecurityv1EventSetRoutingIsmDomain TypesEventType = "hyperlane.core.interchain_security.v1.EventSetRoutingIsmDomain"
	EventTypeHyperlanecoreinterchainSecurityv1EventSetRoutingIsm TypesEventType = "hyperlane.core.interchain_security.v1.EventSetRoutingIsm"
	EventTypeHyperlanecoreinterchainSecurityv1EventCreateRoutingIsm TypesEventType = "hyperlane.core.interchain_security.v1.EventCreateRoutingIsm"
)

// All allowed values of TypesEventType enum
var AllowedTypesEventTypeEnumValues = []TypesEventType{
	"unknown",
	"coin_received",
	"coinbase",
	"coin_spent",
	"burn",
	"mint",
	"message",
	"proposer_reward",
	"rewards",
	"commission",
	"liveness",
	"transfer",
	"celestia.blob.v1.EventPayForBlobs",
	"redelegate",
	"AttestationRequest",
	"withdraw_rewards",
	"withdraw_commission",
	"set_withdraw_address",
	"create_validator",
	"delegate",
	"edit_validator",
	"unbond",
	"tx",
	"complete_redelegation",
	"complete_unbonding",
	"use_feegrant",
	"revoke_feegrant",
	"set_feegrant",
	"update_feegrant",
	"slash",
	"proposal_vote",
	"proposal_deposit",
	"submit_proposal",
	"cosmos.authz.v1beta1.EventGrant",
	"send_packet",
	"ibc_transfer",
	"fungible_token_packet",
	"acknowledge_packet",
	"create_client",
	"update_client",
	"connection_open_try",
	"connection_open_init",
	"connection_open_confirm",
	"connection_open_ack",
	"channel_open_try",
	"channel_open_init",
	"channel_open_confirm",
	"channel_open_ack",
	"recv_packet",
	"write_acknowledgement",
	"timeout",
	"timeout_packet",
	"cosmos.authz.v1beta1.EventRevoke",
	"cosmos.authz.v1.EventRevoke",
	"cancel_unbonding_delegation",
	"active_proposal",
	"inactive_proposal",
	"ics27_packet",
	"channel_close_confirm",
	"update_client_proposal",
	"hyperlane.core.v1.EventDispatch",
	"hyperlane.core.v1.EventProcess",
	"hyperlane.core.v1.EventCreateMailbox",
	"hyperlane.core.v1.EventSetMailbox",
	"hyperlane.warp.v1.EventCreateSyntheticToken",
	"hyperlane.warp.v1.EventCreateCollateralToken",
	"hyperlane.warp.v1.EventSetToken",
	"hyperlane.warp.v1.EventEnrollRemoteRouter",
	"hyperlane.warp.v1.EventUnrollRemoteRouter",
	"hyperlane.warp.v1.EventSendRemoteTransfer",
	"hyperlane.warp.v1.EventReceiveRemoteTransfer",
	"hyperlane.core.post_dispatch.v1.EventCreateMerkleTreeHook",
	"hyperlane.core.post_dispatch.v1.EventInsertedIntoTree",
	"hyperlane.core.post_dispatch.v1.EventGasPayment",
	"hyperlane.core.post_dispatch.v1.EventCreateNoopHook",
	"hyperlane.core.post_dispatch.v1.EventCreateIgp",
	"hyperlane.core.post_dispatch.v1.EventSetIgp",
	"hyperlane.core.post_dispatch.v1.EventSetDestinationGasConfig",
	"hyperlane.core.post_dispatch.v1.EventClaimIgp",
	"hyperlane.core.interchain_security.v1.EventCreateNoopIsm",
	"hyperlane.core.interchain_security.v1.EventSetRoutingIsmDomain",
	"hyperlane.core.interchain_security.v1.EventSetRoutingIsm",
	"hyperlane.core.interchain_security.v1.EventCreateRoutingIsm",
}

func (v *TypesEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesEventType(value)
	for _, existing := range AllowedTypesEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesEventType", value)
}

// NewTypesEventTypeFromValue returns a pointer to a valid TypesEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesEventTypeFromValue(v string) (*TypesEventType, error) {
	ev := TypesEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesEventType: valid values are %v", v, AllowedTypesEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesEventType) IsValid() bool {
	for _, existing := range AllowedTypesEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.EventType value
func (v TypesEventType) Ptr() *TypesEventType {
	return &v
}

type NullableTypesEventType struct {
	value *TypesEventType
	isSet bool
}

func (v NullableTypesEventType) Get() *TypesEventType {
	return v.value
}

func (v *NullableTypesEventType) Set(val *TypesEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesEventType(val *TypesEventType) *NullableTypesEventType {
	return &NullableTypesEventType{value: val, isSet: true}
}

func (v NullableTypesEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


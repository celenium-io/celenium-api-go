/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"time"
)

// checks if the ResponsesProposal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesProposal{}

// ResponsesProposal struct for ResponsesProposal
type ResponsesProposal struct {
	Abstain *int32 `json:"abstain,omitempty"`
	AbstainAddrs *int32 `json:"abstain_addrs,omitempty"`
	AbstainVals *int32 `json:"abstain_vals,omitempty"`
	AbstainVotingPower *string `json:"abstain_voting_power,omitempty"`
	ActivationTime *time.Time `json:"activation_time,omitempty"`
	Changes []int32 `json:"changes,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Deposit *string `json:"deposit,omitempty"`
	DepositTime *time.Time `json:"deposit_time,omitempty"`
	Description *string `json:"description,omitempty"`
	Height *int64 `json:"height,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
	No *int32 `json:"no,omitempty"`
	NoAddrs *int32 `json:"no_addrs,omitempty"`
	NoVals *int32 `json:"no_vals,omitempty"`
	NoVotingPower *string `json:"no_voting_power,omitempty"`
	NoWithVeto *int32 `json:"no_with_veto,omitempty"`
	NoWithVetoAddrs *int32 `json:"no_with_veto_addrs,omitempty"`
	NoWithVetoVals *int32 `json:"no_with_veto_vals,omitempty"`
	NoWithVetoVotingPower *string `json:"no_with_veto_voting_power,omitempty"`
	Proposer *ResponsesShortAddress `json:"proposer,omitempty"`
	Status *string `json:"status,omitempty"`
	Title *string `json:"title,omitempty"`
	Type *string `json:"type,omitempty"`
	VotesCount *int32 `json:"votes_count,omitempty"`
	VotingPower *string `json:"voting_power,omitempty"`
	Yes *int32 `json:"yes,omitempty"`
	YesAddrs *int32 `json:"yes_addrs,omitempty"`
	YesVals *int32 `json:"yes_vals,omitempty"`
	YesVotingPower *string `json:"yes_voting_power,omitempty"`
}

// NewResponsesProposal instantiates a new ResponsesProposal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesProposal() *ResponsesProposal {
	this := ResponsesProposal{}
	return &this
}

// NewResponsesProposalWithDefaults instantiates a new ResponsesProposal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesProposalWithDefaults() *ResponsesProposal {
	this := ResponsesProposal{}
	return &this
}

// GetAbstain returns the Abstain field value if set, zero value otherwise.
func (o *ResponsesProposal) GetAbstain() int32 {
	if o == nil || IsNil(o.Abstain) {
		var ret int32
		return ret
	}
	return *o.Abstain
}

// GetAbstainOk returns a tuple with the Abstain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetAbstainOk() (*int32, bool) {
	if o == nil || IsNil(o.Abstain) {
		return nil, false
	}
	return o.Abstain, true
}

// HasAbstain returns a boolean if a field has been set.
func (o *ResponsesProposal) HasAbstain() bool {
	if o != nil && !IsNil(o.Abstain) {
		return true
	}

	return false
}

// SetAbstain gets a reference to the given int32 and assigns it to the Abstain field.
func (o *ResponsesProposal) SetAbstain(v int32) {
	o.Abstain = &v
}

// GetAbstainAddrs returns the AbstainAddrs field value if set, zero value otherwise.
func (o *ResponsesProposal) GetAbstainAddrs() int32 {
	if o == nil || IsNil(o.AbstainAddrs) {
		var ret int32
		return ret
	}
	return *o.AbstainAddrs
}

// GetAbstainAddrsOk returns a tuple with the AbstainAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetAbstainAddrsOk() (*int32, bool) {
	if o == nil || IsNil(o.AbstainAddrs) {
		return nil, false
	}
	return o.AbstainAddrs, true
}

// HasAbstainAddrs returns a boolean if a field has been set.
func (o *ResponsesProposal) HasAbstainAddrs() bool {
	if o != nil && !IsNil(o.AbstainAddrs) {
		return true
	}

	return false
}

// SetAbstainAddrs gets a reference to the given int32 and assigns it to the AbstainAddrs field.
func (o *ResponsesProposal) SetAbstainAddrs(v int32) {
	o.AbstainAddrs = &v
}

// GetAbstainVals returns the AbstainVals field value if set, zero value otherwise.
func (o *ResponsesProposal) GetAbstainVals() int32 {
	if o == nil || IsNil(o.AbstainVals) {
		var ret int32
		return ret
	}
	return *o.AbstainVals
}

// GetAbstainValsOk returns a tuple with the AbstainVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetAbstainValsOk() (*int32, bool) {
	if o == nil || IsNil(o.AbstainVals) {
		return nil, false
	}
	return o.AbstainVals, true
}

// HasAbstainVals returns a boolean if a field has been set.
func (o *ResponsesProposal) HasAbstainVals() bool {
	if o != nil && !IsNil(o.AbstainVals) {
		return true
	}

	return false
}

// SetAbstainVals gets a reference to the given int32 and assigns it to the AbstainVals field.
func (o *ResponsesProposal) SetAbstainVals(v int32) {
	o.AbstainVals = &v
}

// GetAbstainVotingPower returns the AbstainVotingPower field value if set, zero value otherwise.
func (o *ResponsesProposal) GetAbstainVotingPower() string {
	if o == nil || IsNil(o.AbstainVotingPower) {
		var ret string
		return ret
	}
	return *o.AbstainVotingPower
}

// GetAbstainVotingPowerOk returns a tuple with the AbstainVotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetAbstainVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.AbstainVotingPower) {
		return nil, false
	}
	return o.AbstainVotingPower, true
}

// HasAbstainVotingPower returns a boolean if a field has been set.
func (o *ResponsesProposal) HasAbstainVotingPower() bool {
	if o != nil && !IsNil(o.AbstainVotingPower) {
		return true
	}

	return false
}

// SetAbstainVotingPower gets a reference to the given string and assigns it to the AbstainVotingPower field.
func (o *ResponsesProposal) SetAbstainVotingPower(v string) {
	o.AbstainVotingPower = &v
}

// GetActivationTime returns the ActivationTime field value if set, zero value otherwise.
func (o *ResponsesProposal) GetActivationTime() time.Time {
	if o == nil || IsNil(o.ActivationTime) {
		var ret time.Time
		return ret
	}
	return *o.ActivationTime
}

// GetActivationTimeOk returns a tuple with the ActivationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetActivationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ActivationTime) {
		return nil, false
	}
	return o.ActivationTime, true
}

// HasActivationTime returns a boolean if a field has been set.
func (o *ResponsesProposal) HasActivationTime() bool {
	if o != nil && !IsNil(o.ActivationTime) {
		return true
	}

	return false
}

// SetActivationTime gets a reference to the given time.Time and assigns it to the ActivationTime field.
func (o *ResponsesProposal) SetActivationTime(v time.Time) {
	o.ActivationTime = &v
}

// GetChanges returns the Changes field value if set, zero value otherwise.
func (o *ResponsesProposal) GetChanges() []int32 {
	if o == nil || IsNil(o.Changes) {
		var ret []int32
		return ret
	}
	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetChangesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Changes) {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *ResponsesProposal) HasChanges() bool {
	if o != nil && !IsNil(o.Changes) {
		return true
	}

	return false
}

// SetChanges gets a reference to the given []int32 and assigns it to the Changes field.
func (o *ResponsesProposal) SetChanges(v []int32) {
	o.Changes = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ResponsesProposal) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ResponsesProposal) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ResponsesProposal) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *ResponsesProposal) GetDeposit() string {
	if o == nil || IsNil(o.Deposit) {
		var ret string
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetDepositOk() (*string, bool) {
	if o == nil || IsNil(o.Deposit) {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *ResponsesProposal) HasDeposit() bool {
	if o != nil && !IsNil(o.Deposit) {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given string and assigns it to the Deposit field.
func (o *ResponsesProposal) SetDeposit(v string) {
	o.Deposit = &v
}

// GetDepositTime returns the DepositTime field value if set, zero value otherwise.
func (o *ResponsesProposal) GetDepositTime() time.Time {
	if o == nil || IsNil(o.DepositTime) {
		var ret time.Time
		return ret
	}
	return *o.DepositTime
}

// GetDepositTimeOk returns a tuple with the DepositTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetDepositTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DepositTime) {
		return nil, false
	}
	return o.DepositTime, true
}

// HasDepositTime returns a boolean if a field has been set.
func (o *ResponsesProposal) HasDepositTime() bool {
	if o != nil && !IsNil(o.DepositTime) {
		return true
	}

	return false
}

// SetDepositTime gets a reference to the given time.Time and assigns it to the DepositTime field.
func (o *ResponsesProposal) SetDepositTime(v time.Time) {
	o.DepositTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResponsesProposal) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResponsesProposal) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResponsesProposal) SetDescription(v string) {
	o.Description = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ResponsesProposal) GetHeight() int64 {
	if o == nil || IsNil(o.Height) {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ResponsesProposal) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *ResponsesProposal) SetHeight(v int64) {
	o.Height = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsesProposal) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsesProposal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ResponsesProposal) SetId(v int64) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ResponsesProposal) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ResponsesProposal) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *ResponsesProposal) SetMetadata(v string) {
	o.Metadata = &v
}

// GetNo returns the No field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNo() int32 {
	if o == nil || IsNil(o.No) {
		var ret int32
		return ret
	}
	return *o.No
}

// GetNoOk returns a tuple with the No field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoOk() (*int32, bool) {
	if o == nil || IsNil(o.No) {
		return nil, false
	}
	return o.No, true
}

// HasNo returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNo() bool {
	if o != nil && !IsNil(o.No) {
		return true
	}

	return false
}

// SetNo gets a reference to the given int32 and assigns it to the No field.
func (o *ResponsesProposal) SetNo(v int32) {
	o.No = &v
}

// GetNoAddrs returns the NoAddrs field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoAddrs() int32 {
	if o == nil || IsNil(o.NoAddrs) {
		var ret int32
		return ret
	}
	return *o.NoAddrs
}

// GetNoAddrsOk returns a tuple with the NoAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoAddrsOk() (*int32, bool) {
	if o == nil || IsNil(o.NoAddrs) {
		return nil, false
	}
	return o.NoAddrs, true
}

// HasNoAddrs returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoAddrs() bool {
	if o != nil && !IsNil(o.NoAddrs) {
		return true
	}

	return false
}

// SetNoAddrs gets a reference to the given int32 and assigns it to the NoAddrs field.
func (o *ResponsesProposal) SetNoAddrs(v int32) {
	o.NoAddrs = &v
}

// GetNoVals returns the NoVals field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoVals() int32 {
	if o == nil || IsNil(o.NoVals) {
		var ret int32
		return ret
	}
	return *o.NoVals
}

// GetNoValsOk returns a tuple with the NoVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoValsOk() (*int32, bool) {
	if o == nil || IsNil(o.NoVals) {
		return nil, false
	}
	return o.NoVals, true
}

// HasNoVals returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoVals() bool {
	if o != nil && !IsNil(o.NoVals) {
		return true
	}

	return false
}

// SetNoVals gets a reference to the given int32 and assigns it to the NoVals field.
func (o *ResponsesProposal) SetNoVals(v int32) {
	o.NoVals = &v
}

// GetNoVotingPower returns the NoVotingPower field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoVotingPower() string {
	if o == nil || IsNil(o.NoVotingPower) {
		var ret string
		return ret
	}
	return *o.NoVotingPower
}

// GetNoVotingPowerOk returns a tuple with the NoVotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.NoVotingPower) {
		return nil, false
	}
	return o.NoVotingPower, true
}

// HasNoVotingPower returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoVotingPower() bool {
	if o != nil && !IsNil(o.NoVotingPower) {
		return true
	}

	return false
}

// SetNoVotingPower gets a reference to the given string and assigns it to the NoVotingPower field.
func (o *ResponsesProposal) SetNoVotingPower(v string) {
	o.NoVotingPower = &v
}

// GetNoWithVeto returns the NoWithVeto field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoWithVeto() int32 {
	if o == nil || IsNil(o.NoWithVeto) {
		var ret int32
		return ret
	}
	return *o.NoWithVeto
}

// GetNoWithVetoOk returns a tuple with the NoWithVeto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoWithVetoOk() (*int32, bool) {
	if o == nil || IsNil(o.NoWithVeto) {
		return nil, false
	}
	return o.NoWithVeto, true
}

// HasNoWithVeto returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoWithVeto() bool {
	if o != nil && !IsNil(o.NoWithVeto) {
		return true
	}

	return false
}

// SetNoWithVeto gets a reference to the given int32 and assigns it to the NoWithVeto field.
func (o *ResponsesProposal) SetNoWithVeto(v int32) {
	o.NoWithVeto = &v
}

// GetNoWithVetoAddrs returns the NoWithVetoAddrs field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoWithVetoAddrs() int32 {
	if o == nil || IsNil(o.NoWithVetoAddrs) {
		var ret int32
		return ret
	}
	return *o.NoWithVetoAddrs
}

// GetNoWithVetoAddrsOk returns a tuple with the NoWithVetoAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoWithVetoAddrsOk() (*int32, bool) {
	if o == nil || IsNil(o.NoWithVetoAddrs) {
		return nil, false
	}
	return o.NoWithVetoAddrs, true
}

// HasNoWithVetoAddrs returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoWithVetoAddrs() bool {
	if o != nil && !IsNil(o.NoWithVetoAddrs) {
		return true
	}

	return false
}

// SetNoWithVetoAddrs gets a reference to the given int32 and assigns it to the NoWithVetoAddrs field.
func (o *ResponsesProposal) SetNoWithVetoAddrs(v int32) {
	o.NoWithVetoAddrs = &v
}

// GetNoWithVetoVals returns the NoWithVetoVals field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoWithVetoVals() int32 {
	if o == nil || IsNil(o.NoWithVetoVals) {
		var ret int32
		return ret
	}
	return *o.NoWithVetoVals
}

// GetNoWithVetoValsOk returns a tuple with the NoWithVetoVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoWithVetoValsOk() (*int32, bool) {
	if o == nil || IsNil(o.NoWithVetoVals) {
		return nil, false
	}
	return o.NoWithVetoVals, true
}

// HasNoWithVetoVals returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoWithVetoVals() bool {
	if o != nil && !IsNil(o.NoWithVetoVals) {
		return true
	}

	return false
}

// SetNoWithVetoVals gets a reference to the given int32 and assigns it to the NoWithVetoVals field.
func (o *ResponsesProposal) SetNoWithVetoVals(v int32) {
	o.NoWithVetoVals = &v
}

// GetNoWithVetoVotingPower returns the NoWithVetoVotingPower field value if set, zero value otherwise.
func (o *ResponsesProposal) GetNoWithVetoVotingPower() string {
	if o == nil || IsNil(o.NoWithVetoVotingPower) {
		var ret string
		return ret
	}
	return *o.NoWithVetoVotingPower
}

// GetNoWithVetoVotingPowerOk returns a tuple with the NoWithVetoVotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetNoWithVetoVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.NoWithVetoVotingPower) {
		return nil, false
	}
	return o.NoWithVetoVotingPower, true
}

// HasNoWithVetoVotingPower returns a boolean if a field has been set.
func (o *ResponsesProposal) HasNoWithVetoVotingPower() bool {
	if o != nil && !IsNil(o.NoWithVetoVotingPower) {
		return true
	}

	return false
}

// SetNoWithVetoVotingPower gets a reference to the given string and assigns it to the NoWithVetoVotingPower field.
func (o *ResponsesProposal) SetNoWithVetoVotingPower(v string) {
	o.NoWithVetoVotingPower = &v
}

// GetProposer returns the Proposer field value if set, zero value otherwise.
func (o *ResponsesProposal) GetProposer() ResponsesShortAddress {
	if o == nil || IsNil(o.Proposer) {
		var ret ResponsesShortAddress
		return ret
	}
	return *o.Proposer
}

// GetProposerOk returns a tuple with the Proposer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetProposerOk() (*ResponsesShortAddress, bool) {
	if o == nil || IsNil(o.Proposer) {
		return nil, false
	}
	return o.Proposer, true
}

// HasProposer returns a boolean if a field has been set.
func (o *ResponsesProposal) HasProposer() bool {
	if o != nil && !IsNil(o.Proposer) {
		return true
	}

	return false
}

// SetProposer gets a reference to the given ResponsesShortAddress and assigns it to the Proposer field.
func (o *ResponsesProposal) SetProposer(v ResponsesShortAddress) {
	o.Proposer = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResponsesProposal) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResponsesProposal) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResponsesProposal) SetStatus(v string) {
	o.Status = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ResponsesProposal) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ResponsesProposal) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ResponsesProposal) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResponsesProposal) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResponsesProposal) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResponsesProposal) SetType(v string) {
	o.Type = &v
}

// GetVotesCount returns the VotesCount field value if set, zero value otherwise.
func (o *ResponsesProposal) GetVotesCount() int32 {
	if o == nil || IsNil(o.VotesCount) {
		var ret int32
		return ret
	}
	return *o.VotesCount
}

// GetVotesCountOk returns a tuple with the VotesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetVotesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.VotesCount) {
		return nil, false
	}
	return o.VotesCount, true
}

// HasVotesCount returns a boolean if a field has been set.
func (o *ResponsesProposal) HasVotesCount() bool {
	if o != nil && !IsNil(o.VotesCount) {
		return true
	}

	return false
}

// SetVotesCount gets a reference to the given int32 and assigns it to the VotesCount field.
func (o *ResponsesProposal) SetVotesCount(v int32) {
	o.VotesCount = &v
}

// GetVotingPower returns the VotingPower field value if set, zero value otherwise.
func (o *ResponsesProposal) GetVotingPower() string {
	if o == nil || IsNil(o.VotingPower) {
		var ret string
		return ret
	}
	return *o.VotingPower
}

// GetVotingPowerOk returns a tuple with the VotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.VotingPower) {
		return nil, false
	}
	return o.VotingPower, true
}

// HasVotingPower returns a boolean if a field has been set.
func (o *ResponsesProposal) HasVotingPower() bool {
	if o != nil && !IsNil(o.VotingPower) {
		return true
	}

	return false
}

// SetVotingPower gets a reference to the given string and assigns it to the VotingPower field.
func (o *ResponsesProposal) SetVotingPower(v string) {
	o.VotingPower = &v
}

// GetYes returns the Yes field value if set, zero value otherwise.
func (o *ResponsesProposal) GetYes() int32 {
	if o == nil || IsNil(o.Yes) {
		var ret int32
		return ret
	}
	return *o.Yes
}

// GetYesOk returns a tuple with the Yes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetYesOk() (*int32, bool) {
	if o == nil || IsNil(o.Yes) {
		return nil, false
	}
	return o.Yes, true
}

// HasYes returns a boolean if a field has been set.
func (o *ResponsesProposal) HasYes() bool {
	if o != nil && !IsNil(o.Yes) {
		return true
	}

	return false
}

// SetYes gets a reference to the given int32 and assigns it to the Yes field.
func (o *ResponsesProposal) SetYes(v int32) {
	o.Yes = &v
}

// GetYesAddrs returns the YesAddrs field value if set, zero value otherwise.
func (o *ResponsesProposal) GetYesAddrs() int32 {
	if o == nil || IsNil(o.YesAddrs) {
		var ret int32
		return ret
	}
	return *o.YesAddrs
}

// GetYesAddrsOk returns a tuple with the YesAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetYesAddrsOk() (*int32, bool) {
	if o == nil || IsNil(o.YesAddrs) {
		return nil, false
	}
	return o.YesAddrs, true
}

// HasYesAddrs returns a boolean if a field has been set.
func (o *ResponsesProposal) HasYesAddrs() bool {
	if o != nil && !IsNil(o.YesAddrs) {
		return true
	}

	return false
}

// SetYesAddrs gets a reference to the given int32 and assigns it to the YesAddrs field.
func (o *ResponsesProposal) SetYesAddrs(v int32) {
	o.YesAddrs = &v
}

// GetYesVals returns the YesVals field value if set, zero value otherwise.
func (o *ResponsesProposal) GetYesVals() int32 {
	if o == nil || IsNil(o.YesVals) {
		var ret int32
		return ret
	}
	return *o.YesVals
}

// GetYesValsOk returns a tuple with the YesVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetYesValsOk() (*int32, bool) {
	if o == nil || IsNil(o.YesVals) {
		return nil, false
	}
	return o.YesVals, true
}

// HasYesVals returns a boolean if a field has been set.
func (o *ResponsesProposal) HasYesVals() bool {
	if o != nil && !IsNil(o.YesVals) {
		return true
	}

	return false
}

// SetYesVals gets a reference to the given int32 and assigns it to the YesVals field.
func (o *ResponsesProposal) SetYesVals(v int32) {
	o.YesVals = &v
}

// GetYesVotingPower returns the YesVotingPower field value if set, zero value otherwise.
func (o *ResponsesProposal) GetYesVotingPower() string {
	if o == nil || IsNil(o.YesVotingPower) {
		var ret string
		return ret
	}
	return *o.YesVotingPower
}

// GetYesVotingPowerOk returns a tuple with the YesVotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesProposal) GetYesVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.YesVotingPower) {
		return nil, false
	}
	return o.YesVotingPower, true
}

// HasYesVotingPower returns a boolean if a field has been set.
func (o *ResponsesProposal) HasYesVotingPower() bool {
	if o != nil && !IsNil(o.YesVotingPower) {
		return true
	}

	return false
}

// SetYesVotingPower gets a reference to the given string and assigns it to the YesVotingPower field.
func (o *ResponsesProposal) SetYesVotingPower(v string) {
	o.YesVotingPower = &v
}

func (o ResponsesProposal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesProposal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abstain) {
		toSerialize["abstain"] = o.Abstain
	}
	if !IsNil(o.AbstainAddrs) {
		toSerialize["abstain_addrs"] = o.AbstainAddrs
	}
	if !IsNil(o.AbstainVals) {
		toSerialize["abstain_vals"] = o.AbstainVals
	}
	if !IsNil(o.AbstainVotingPower) {
		toSerialize["abstain_voting_power"] = o.AbstainVotingPower
	}
	if !IsNil(o.ActivationTime) {
		toSerialize["activation_time"] = o.ActivationTime
	}
	if !IsNil(o.Changes) {
		toSerialize["changes"] = o.Changes
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Deposit) {
		toSerialize["deposit"] = o.Deposit
	}
	if !IsNil(o.DepositTime) {
		toSerialize["deposit_time"] = o.DepositTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.No) {
		toSerialize["no"] = o.No
	}
	if !IsNil(o.NoAddrs) {
		toSerialize["no_addrs"] = o.NoAddrs
	}
	if !IsNil(o.NoVals) {
		toSerialize["no_vals"] = o.NoVals
	}
	if !IsNil(o.NoVotingPower) {
		toSerialize["no_voting_power"] = o.NoVotingPower
	}
	if !IsNil(o.NoWithVeto) {
		toSerialize["no_with_veto"] = o.NoWithVeto
	}
	if !IsNil(o.NoWithVetoAddrs) {
		toSerialize["no_with_veto_addrs"] = o.NoWithVetoAddrs
	}
	if !IsNil(o.NoWithVetoVals) {
		toSerialize["no_with_veto_vals"] = o.NoWithVetoVals
	}
	if !IsNil(o.NoWithVetoVotingPower) {
		toSerialize["no_with_veto_voting_power"] = o.NoWithVetoVotingPower
	}
	if !IsNil(o.Proposer) {
		toSerialize["proposer"] = o.Proposer
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VotesCount) {
		toSerialize["votes_count"] = o.VotesCount
	}
	if !IsNil(o.VotingPower) {
		toSerialize["voting_power"] = o.VotingPower
	}
	if !IsNil(o.Yes) {
		toSerialize["yes"] = o.Yes
	}
	if !IsNil(o.YesAddrs) {
		toSerialize["yes_addrs"] = o.YesAddrs
	}
	if !IsNil(o.YesVals) {
		toSerialize["yes_vals"] = o.YesVals
	}
	if !IsNil(o.YesVotingPower) {
		toSerialize["yes_voting_power"] = o.YesVotingPower
	}
	return toSerialize, nil
}

type NullableResponsesProposal struct {
	value *ResponsesProposal
	isSet bool
}

func (v NullableResponsesProposal) Get() *ResponsesProposal {
	return v.value
}

func (v *NullableResponsesProposal) Set(val *ResponsesProposal) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesProposal) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesProposal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesProposal(val *ResponsesProposal) *NullableResponsesProposal {
	return &NullableResponsesProposal{value: val, isSet: true}
}

func (v NullableResponsesProposal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesProposal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



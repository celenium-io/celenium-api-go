/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesNativeToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesNativeToken{}

// ResponsesNativeToken struct for ResponsesNativeToken
type ResponsesNativeToken struct {
	Decimals *int64 `json:"decimals,omitempty"`
	Name *string `json:"name,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewResponsesNativeToken instantiates a new ResponsesNativeToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesNativeToken() *ResponsesNativeToken {
	this := ResponsesNativeToken{}
	return &this
}

// NewResponsesNativeTokenWithDefaults instantiates a new ResponsesNativeToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesNativeTokenWithDefaults() *ResponsesNativeToken {
	this := ResponsesNativeToken{}
	return &this
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *ResponsesNativeToken) GetDecimals() int64 {
	if o == nil || IsNil(o.Decimals) {
		var ret int64
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesNativeToken) GetDecimalsOk() (*int64, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *ResponsesNativeToken) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int64 and assigns it to the Decimals field.
func (o *ResponsesNativeToken) SetDecimals(v int64) {
	o.Decimals = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponsesNativeToken) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesNativeToken) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponsesNativeToken) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponsesNativeToken) SetName(v string) {
	o.Name = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ResponsesNativeToken) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesNativeToken) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ResponsesNativeToken) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ResponsesNativeToken) SetSymbol(v string) {
	o.Symbol = &v
}

func (o ResponsesNativeToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesNativeToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableResponsesNativeToken struct {
	value *ResponsesNativeToken
	isSet bool
}

func (v NullableResponsesNativeToken) Get() *ResponsesNativeToken {
	return v.value
}

func (v *NullableResponsesNativeToken) Set(val *ResponsesNativeToken) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesNativeToken) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesNativeToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesNativeToken(val *ResponsesNativeToken) *NullableResponsesNativeToken {
	return &NullableResponsesNativeToken{value: val, isSet: true}
}

func (v NullableResponsesNativeToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesNativeToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



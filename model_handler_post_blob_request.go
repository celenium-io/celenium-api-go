/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerPostBlobRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerPostBlobRequest{}

// HandlerPostBlobRequest struct for HandlerPostBlobRequest
type HandlerPostBlobRequest struct {
	Commitment string `json:"commitment"`
	Hash string `json:"hash"`
	Height int32 `json:"height"`
}

type _HandlerPostBlobRequest HandlerPostBlobRequest

// NewHandlerPostBlobRequest instantiates a new HandlerPostBlobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerPostBlobRequest(commitment string, hash string, height int32) *HandlerPostBlobRequest {
	this := HandlerPostBlobRequest{}
	this.Commitment = commitment
	this.Hash = hash
	this.Height = height
	return &this
}

// NewHandlerPostBlobRequestWithDefaults instantiates a new HandlerPostBlobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerPostBlobRequestWithDefaults() *HandlerPostBlobRequest {
	this := HandlerPostBlobRequest{}
	return &this
}

// GetCommitment returns the Commitment field value
func (o *HandlerPostBlobRequest) GetCommitment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commitment
}

// GetCommitmentOk returns a tuple with the Commitment field value
// and a boolean to check if the value has been set.
func (o *HandlerPostBlobRequest) GetCommitmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commitment, true
}

// SetCommitment sets field value
func (o *HandlerPostBlobRequest) SetCommitment(v string) {
	o.Commitment = v
}

// GetHash returns the Hash field value
func (o *HandlerPostBlobRequest) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *HandlerPostBlobRequest) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *HandlerPostBlobRequest) SetHash(v string) {
	o.Hash = v
}

// GetHeight returns the Height field value
func (o *HandlerPostBlobRequest) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *HandlerPostBlobRequest) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *HandlerPostBlobRequest) SetHeight(v int32) {
	o.Height = v
}

func (o HandlerPostBlobRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerPostBlobRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commitment"] = o.Commitment
	toSerialize["hash"] = o.Hash
	toSerialize["height"] = o.Height
	return toSerialize, nil
}

func (o *HandlerPostBlobRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commitment",
		"hash",
		"height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerPostBlobRequest := _HandlerPostBlobRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerPostBlobRequest)

	if err != nil {
		return err
	}

	*o = HandlerPostBlobRequest(varHandlerPostBlobRequest)

	return err
}

type NullableHandlerPostBlobRequest struct {
	value *HandlerPostBlobRequest
	isSet bool
}

func (v NullableHandlerPostBlobRequest) Get() *HandlerPostBlobRequest {
	return v.value
}

func (v *NullableHandlerPostBlobRequest) Set(val *HandlerPostBlobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerPostBlobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerPostBlobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerPostBlobRequest(val *HandlerPostBlobRequest) *NullableHandlerPostBlobRequest {
	return &NullableHandlerPostBlobRequest{value: val, isSet: true}
}

func (v NullableHandlerPostBlobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerPostBlobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



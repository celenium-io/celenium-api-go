/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
	"time"
)

// checks if the ResponsesState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesState{}

// ResponsesState struct for ResponsesState
type ResponsesState struct {
	ChainId *string `json:"chain_id,omitempty"`
	Hash *string `json:"hash,omitempty"`
	Id *int64 `json:"id,omitempty"`
	LastHeight *int64 `json:"last_height,omitempty"`
	LastTime *time.Time `json:"last_time,omitempty"`
	Name *string `json:"name,omitempty"`
	Synced *bool `json:"synced,omitempty"`
	TotalAccounts *int64 `json:"total_accounts,omitempty"`
	TotalBlobsSize *int64 `json:"total_blobs_size,omitempty"`
	TotalFee *string `json:"total_fee,omitempty"`
	TotalIbcClients *int32 `json:"total_ibc_clients,omitempty"`
	TotalNamespaces *int32 `json:"total_namespaces,omitempty"`
	TotalProposals *int64 `json:"total_proposals,omitempty"`
	TotalSupply *string `json:"total_supply,omitempty"`
	TotalTx *int64 `json:"total_tx,omitempty"`
	TotalValidators *int64 `json:"total_validators,omitempty"`
	TotalVotingPower *string `json:"total_voting_power,omitempty"`
}

// NewResponsesState instantiates a new ResponsesState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesState() *ResponsesState {
	this := ResponsesState{}
	return &this
}

// NewResponsesStateWithDefaults instantiates a new ResponsesState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesStateWithDefaults() *ResponsesState {
	this := ResponsesState{}
	return &this
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *ResponsesState) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *ResponsesState) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *ResponsesState) SetChainId(v string) {
	o.ChainId = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ResponsesState) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ResponsesState) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ResponsesState) SetHash(v string) {
	o.Hash = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsesState) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsesState) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ResponsesState) SetId(v int64) {
	o.Id = &v
}

// GetLastHeight returns the LastHeight field value if set, zero value otherwise.
func (o *ResponsesState) GetLastHeight() int64 {
	if o == nil || IsNil(o.LastHeight) {
		var ret int64
		return ret
	}
	return *o.LastHeight
}

// GetLastHeightOk returns a tuple with the LastHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetLastHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.LastHeight) {
		return nil, false
	}
	return o.LastHeight, true
}

// HasLastHeight returns a boolean if a field has been set.
func (o *ResponsesState) HasLastHeight() bool {
	if o != nil && !IsNil(o.LastHeight) {
		return true
	}

	return false
}

// SetLastHeight gets a reference to the given int64 and assigns it to the LastHeight field.
func (o *ResponsesState) SetLastHeight(v int64) {
	o.LastHeight = &v
}

// GetLastTime returns the LastTime field value if set, zero value otherwise.
func (o *ResponsesState) GetLastTime() time.Time {
	if o == nil || IsNil(o.LastTime) {
		var ret time.Time
		return ret
	}
	return *o.LastTime
}

// GetLastTimeOk returns a tuple with the LastTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetLastTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastTime) {
		return nil, false
	}
	return o.LastTime, true
}

// HasLastTime returns a boolean if a field has been set.
func (o *ResponsesState) HasLastTime() bool {
	if o != nil && !IsNil(o.LastTime) {
		return true
	}

	return false
}

// SetLastTime gets a reference to the given time.Time and assigns it to the LastTime field.
func (o *ResponsesState) SetLastTime(v time.Time) {
	o.LastTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponsesState) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponsesState) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponsesState) SetName(v string) {
	o.Name = &v
}

// GetSynced returns the Synced field value if set, zero value otherwise.
func (o *ResponsesState) GetSynced() bool {
	if o == nil || IsNil(o.Synced) {
		var ret bool
		return ret
	}
	return *o.Synced
}

// GetSyncedOk returns a tuple with the Synced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetSyncedOk() (*bool, bool) {
	if o == nil || IsNil(o.Synced) {
		return nil, false
	}
	return o.Synced, true
}

// HasSynced returns a boolean if a field has been set.
func (o *ResponsesState) HasSynced() bool {
	if o != nil && !IsNil(o.Synced) {
		return true
	}

	return false
}

// SetSynced gets a reference to the given bool and assigns it to the Synced field.
func (o *ResponsesState) SetSynced(v bool) {
	o.Synced = &v
}

// GetTotalAccounts returns the TotalAccounts field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalAccounts() int64 {
	if o == nil || IsNil(o.TotalAccounts) {
		var ret int64
		return ret
	}
	return *o.TotalAccounts
}

// GetTotalAccountsOk returns a tuple with the TotalAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalAccountsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalAccounts) {
		return nil, false
	}
	return o.TotalAccounts, true
}

// HasTotalAccounts returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalAccounts() bool {
	if o != nil && !IsNil(o.TotalAccounts) {
		return true
	}

	return false
}

// SetTotalAccounts gets a reference to the given int64 and assigns it to the TotalAccounts field.
func (o *ResponsesState) SetTotalAccounts(v int64) {
	o.TotalAccounts = &v
}

// GetTotalBlobsSize returns the TotalBlobsSize field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalBlobsSize() int64 {
	if o == nil || IsNil(o.TotalBlobsSize) {
		var ret int64
		return ret
	}
	return *o.TotalBlobsSize
}

// GetTotalBlobsSizeOk returns a tuple with the TotalBlobsSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalBlobsSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalBlobsSize) {
		return nil, false
	}
	return o.TotalBlobsSize, true
}

// HasTotalBlobsSize returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalBlobsSize() bool {
	if o != nil && !IsNil(o.TotalBlobsSize) {
		return true
	}

	return false
}

// SetTotalBlobsSize gets a reference to the given int64 and assigns it to the TotalBlobsSize field.
func (o *ResponsesState) SetTotalBlobsSize(v int64) {
	o.TotalBlobsSize = &v
}

// GetTotalFee returns the TotalFee field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalFee() string {
	if o == nil || IsNil(o.TotalFee) {
		var ret string
		return ret
	}
	return *o.TotalFee
}

// GetTotalFeeOk returns a tuple with the TotalFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalFeeOk() (*string, bool) {
	if o == nil || IsNil(o.TotalFee) {
		return nil, false
	}
	return o.TotalFee, true
}

// HasTotalFee returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalFee() bool {
	if o != nil && !IsNil(o.TotalFee) {
		return true
	}

	return false
}

// SetTotalFee gets a reference to the given string and assigns it to the TotalFee field.
func (o *ResponsesState) SetTotalFee(v string) {
	o.TotalFee = &v
}

// GetTotalIbcClients returns the TotalIbcClients field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalIbcClients() int32 {
	if o == nil || IsNil(o.TotalIbcClients) {
		var ret int32
		return ret
	}
	return *o.TotalIbcClients
}

// GetTotalIbcClientsOk returns a tuple with the TotalIbcClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalIbcClientsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalIbcClients) {
		return nil, false
	}
	return o.TotalIbcClients, true
}

// HasTotalIbcClients returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalIbcClients() bool {
	if o != nil && !IsNil(o.TotalIbcClients) {
		return true
	}

	return false
}

// SetTotalIbcClients gets a reference to the given int32 and assigns it to the TotalIbcClients field.
func (o *ResponsesState) SetTotalIbcClients(v int32) {
	o.TotalIbcClients = &v
}

// GetTotalNamespaces returns the TotalNamespaces field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalNamespaces() int32 {
	if o == nil || IsNil(o.TotalNamespaces) {
		var ret int32
		return ret
	}
	return *o.TotalNamespaces
}

// GetTotalNamespacesOk returns a tuple with the TotalNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalNamespacesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalNamespaces) {
		return nil, false
	}
	return o.TotalNamespaces, true
}

// HasTotalNamespaces returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalNamespaces() bool {
	if o != nil && !IsNil(o.TotalNamespaces) {
		return true
	}

	return false
}

// SetTotalNamespaces gets a reference to the given int32 and assigns it to the TotalNamespaces field.
func (o *ResponsesState) SetTotalNamespaces(v int32) {
	o.TotalNamespaces = &v
}

// GetTotalProposals returns the TotalProposals field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalProposals() int64 {
	if o == nil || IsNil(o.TotalProposals) {
		var ret int64
		return ret
	}
	return *o.TotalProposals
}

// GetTotalProposalsOk returns a tuple with the TotalProposals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalProposalsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalProposals) {
		return nil, false
	}
	return o.TotalProposals, true
}

// HasTotalProposals returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalProposals() bool {
	if o != nil && !IsNil(o.TotalProposals) {
		return true
	}

	return false
}

// SetTotalProposals gets a reference to the given int64 and assigns it to the TotalProposals field.
func (o *ResponsesState) SetTotalProposals(v int64) {
	o.TotalProposals = &v
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalSupply() string {
	if o == nil || IsNil(o.TotalSupply) {
		var ret string
		return ret
	}
	return *o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSupply) {
		return nil, false
	}
	return o.TotalSupply, true
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalSupply() bool {
	if o != nil && !IsNil(o.TotalSupply) {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given string and assigns it to the TotalSupply field.
func (o *ResponsesState) SetTotalSupply(v string) {
	o.TotalSupply = &v
}

// GetTotalTx returns the TotalTx field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalTx() int64 {
	if o == nil || IsNil(o.TotalTx) {
		var ret int64
		return ret
	}
	return *o.TotalTx
}

// GetTotalTxOk returns a tuple with the TotalTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalTxOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalTx) {
		return nil, false
	}
	return o.TotalTx, true
}

// HasTotalTx returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalTx() bool {
	if o != nil && !IsNil(o.TotalTx) {
		return true
	}

	return false
}

// SetTotalTx gets a reference to the given int64 and assigns it to the TotalTx field.
func (o *ResponsesState) SetTotalTx(v int64) {
	o.TotalTx = &v
}

// GetTotalValidators returns the TotalValidators field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalValidators() int64 {
	if o == nil || IsNil(o.TotalValidators) {
		var ret int64
		return ret
	}
	return *o.TotalValidators
}

// GetTotalValidatorsOk returns a tuple with the TotalValidators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalValidatorsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalValidators) {
		return nil, false
	}
	return o.TotalValidators, true
}

// HasTotalValidators returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalValidators() bool {
	if o != nil && !IsNil(o.TotalValidators) {
		return true
	}

	return false
}

// SetTotalValidators gets a reference to the given int64 and assigns it to the TotalValidators field.
func (o *ResponsesState) SetTotalValidators(v int64) {
	o.TotalValidators = &v
}

// GetTotalVotingPower returns the TotalVotingPower field value if set, zero value otherwise.
func (o *ResponsesState) GetTotalVotingPower() string {
	if o == nil || IsNil(o.TotalVotingPower) {
		var ret string
		return ret
	}
	return *o.TotalVotingPower
}

// GetTotalVotingPowerOk returns a tuple with the TotalVotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesState) GetTotalVotingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.TotalVotingPower) {
		return nil, false
	}
	return o.TotalVotingPower, true
}

// HasTotalVotingPower returns a boolean if a field has been set.
func (o *ResponsesState) HasTotalVotingPower() bool {
	if o != nil && !IsNil(o.TotalVotingPower) {
		return true
	}

	return false
}

// SetTotalVotingPower gets a reference to the given string and assigns it to the TotalVotingPower field.
func (o *ResponsesState) SetTotalVotingPower(v string) {
	o.TotalVotingPower = &v
}

func (o ResponsesState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastHeight) {
		toSerialize["last_height"] = o.LastHeight
	}
	if !IsNil(o.LastTime) {
		toSerialize["last_time"] = o.LastTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Synced) {
		toSerialize["synced"] = o.Synced
	}
	if !IsNil(o.TotalAccounts) {
		toSerialize["total_accounts"] = o.TotalAccounts
	}
	if !IsNil(o.TotalBlobsSize) {
		toSerialize["total_blobs_size"] = o.TotalBlobsSize
	}
	if !IsNil(o.TotalFee) {
		toSerialize["total_fee"] = o.TotalFee
	}
	if !IsNil(o.TotalIbcClients) {
		toSerialize["total_ibc_clients"] = o.TotalIbcClients
	}
	if !IsNil(o.TotalNamespaces) {
		toSerialize["total_namespaces"] = o.TotalNamespaces
	}
	if !IsNil(o.TotalProposals) {
		toSerialize["total_proposals"] = o.TotalProposals
	}
	if !IsNil(o.TotalSupply) {
		toSerialize["total_supply"] = o.TotalSupply
	}
	if !IsNil(o.TotalTx) {
		toSerialize["total_tx"] = o.TotalTx
	}
	if !IsNil(o.TotalValidators) {
		toSerialize["total_validators"] = o.TotalValidators
	}
	if !IsNil(o.TotalVotingPower) {
		toSerialize["total_voting_power"] = o.TotalVotingPower
	}
	return toSerialize, nil
}

type NullableResponsesState struct {
	value *ResponsesState
	isSet bool
}

func (v NullableResponsesState) Get() *ResponsesState {
	return v.value
}

func (v *NullableResponsesState) Set(val *ResponsesState) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesState) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesState(val *ResponsesState) *NullableResponsesState {
	return &NullableResponsesState{value: val, isSet: true}
}

func (v NullableResponsesState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


